#include "hypergraph.h"
#include "string.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructors & Destructors /////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
hypergraph::hypergraph()
{
    //ctor
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

hypergraph::~hypergraph()
{
    //dtor
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setters & Getters //////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void hypergraph::set_nb_edges(const int n)
{
    nb_edges = n;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void hypergraph::set_nb_nodes(const int n)
{
    nb_nodes = n;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void hypergraph::set_hedges_list(const V2Vs_vector &V2Vs)
{
    hedges_list = V2Vs;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int hypergraph::get_nb_edges()
{
    return nb_edges;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int hypergraph::get_nb_nodes()
{
    return nb_nodes;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

V2Vs_vector hypergraph::get_hedges_list()
{
    return hedges_list;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File reader ////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void hypergraph::read_hypergraph_file(const string & path)
{
    nb_edges = 0; hedges_list.clear();
    std::ifstream hgin(path, ios::in);
    if (hgin.fail()) { cerr << "ERROR: Hypergraph file " << path << " could not be opened.\n"; exit(1); }

    string line;
    while( std::getline(hgin, line) ) // Reading once to get number of lines (hyperedges)
    {
        nb_edges += 1;
    }
    hedges_list.resize(nb_edges);
    hgin.close();

    hgin.open(path,ios::in);
    set<int> nodes;
    vector<string> tokens;
    while( std::getline(hgin, line) ) // Second reading to get hyperedges list
    {
        tokens = split(line, '\t');
        unsigned edge = to_i(tokens[0]); // edge id

        // Parse node set list
        for (size_t i=1; i<tokens.size(); i++)
        {
            int node = to_i(tokens[i]); // node id
            nodes.insert(node);
            hedges_list[edge].push_back(node);
        }

    }
    hgin.close();
    nb_nodes = nodes.size();
    if ( *(--nodes.end()) != nb_nodes - 1 ) { cerr << "ERROR: nodes indices are not corresponding to the integers between 0 and "<< nb_nodes << ". \n";   }
}
